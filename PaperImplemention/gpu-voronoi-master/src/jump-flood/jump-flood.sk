# See here to understand how this works:
# http://www.skorks.com/2010/10/write-a-function-to-determine-if-a-number-is-a-power-of-2/
def isPowerOfTwo(number int) bool {
    return number != 0 && ((number & (number - 1)) == 0)
}

namespace JumpFlood {
    enum Output {
        # Draw a Voronoi diagram as output
        VORONOI

        # Draw a distance field as output. Pixels close to a seed are
        # light and pixels far from a seed are dark.
        DISTANCE_FIELD

        # Draw a drop shadow as output. Each seed of the input casts
        # shadow. The color of the seeds don't matter.
        DROP_SHADOW
    }

    class Options {
        # If this is set to true then pixels on the left border of the input
        # canvas are considered 'close to' pixels on the right border. Same
        # for top and bottom.
        var wrap = false

        # The input to the JFA algorithm is a canvas with seeds drawn onto it.
        # This is the background color that the seeds are drawn onto. For example,
        # you might draw blue and green seeds onto a red background and you want a
        # voronoi diagram of blue and green cells. You pass red as the
        # `seedCanvasBackgroundColor` to communicate that to the JFA algorithm.
        var seedCanvasBackgroundColor Float32Array = Color.clear.toVec4

        # Compute at most this many rounds of the JFA algorithm. This is useful
        # for building a demo to illustrate how it works. -1 means no maximum.
        var maxRounds = -1

        # What kind of output to render.
        var output Output = .VORONOI

        # Used if output is .DROP_SHADOW
        var shadowSpread = -1.0
        var shadowBlur = -1.0
    }
}

class JumpFlood {
    const _wham Wham

    const _gridSize int

    # Used to transform input data (seeds drawn onto a canvas) into information
    # that's ready to be processed by JFA (a buffer of pixels where each red-green
    # and blue-alpha pair specifies a grid location).
    const _prepJumpFloodData Wham.Program

    # Program that runs JFA on data output by _prepJumpFloodData.
    const _jumpFlood Wham.Program

    # Program that draws a Voronoi diagram from processed jump flood data.
    const _drawVoronoi Wham.Program

    # Program that draws a distance field from processed jump flood data.
    # Light pixels are close to a seed and dark pixels are far.
    const _drawDistanceField Wham.Program

    # Program that draws a drop shadow from processed jump flood data.
    const _drawDropShadow Wham.Program

    # Just renders a texture. Useful for testing.
    const _renderTexture Wham.Program

    # WebGL doesn't let you write back to textures. So JFA ping-pongs data back
    # and forth between these two textures.
    var _sourceTexture Wham.Texture
    var _destTexture Wham.Texture

    var _quadBuffer Wham.Buffer
    var _seedInputTexture Wham.Texture
    var _tempOutputTexture Wham.Texture
    var _framebuffer Wham.Framebuffer
    var _simulationStepper dynamic

    var _inputCanvas HTMLCanvasElement
    var _outputCanvas HTMLCanvasElement

    def new(canvas HTMLCanvasElement) {
        if canvas.width != canvas.height {
            throw Error.new("Voronoi canvas parameter must be square. Size is (\(canvas.width), \(canvas.height))")
        }

        if !isPowerOfTwo(canvas.width) {
            throw Error.new("Voronoi canvas size must be a power of two. Size is \(canvas.width)")
        }

        _gridSize = canvas.width
        _outputCanvas = canvas

        _wham = Wham.new(canvas)
        if _wham.ctx == null {
            throw Error.new("Failed to initialize Wham")
        }

        _wham.ctx.disable(_wham.ctx.DEPTH_TEST)

        const ctx = _wham.ctx
        ctx.disable(ctx.DEPTH_TEST)

        _jumpFlood = Wham.Program.new(_wham.ctx, GLSLX_SOURCE_V_COPY_POSITION, GLSLX_SOURCE_F_JUMP_FLOOD)
        _prepJumpFloodData = Wham.Program.new(_wham.ctx, GLSLX_SOURCE_V_COPY_POSITION, GLSLX_SOURCE_F_PREP_FOR_JFA)
        _renderTexture = Wham.Program.new(_wham.ctx, GLSLX_SOURCE_V_COPY_POSITION, GLSLX_SOURCE_F_RENDER_TEXTURE)
        _drawVoronoi = Wham.Program.new(_wham.ctx, GLSLX_SOURCE_V_COPY_POSITION, GLSLX_SOURCE_F_DRAW_JUMP_FLOOD_DATA)
        _drawDistanceField = Wham.Program.new(_wham.ctx, GLSLX_SOURCE_V_COPY_POSITION, GLSLX_SOURCE_F_DRAW_DISTANCE_FIELD)
        _drawDropShadow = Wham.Program.new(_wham.ctx, GLSLX_SOURCE_V_COPY_POSITION, GLSLX_SOURCE_F_DRAW_SHADOW)

        _quadBuffer = Wham.Buffer.new(ctx)
        _quadBuffer.update(Wham.QUAD2, ctx.STATIC_DRAW)

        var opts = Wham.TextureOptions.new(ctx, ctx.RGBA, ctx.REPEAT, ctx.NEAREST, ctx.UNSIGNED_BYTE)
        _sourceTexture = Wham.Texture.new(ctx, opts)
        _sourceTexture.clear(_gridSize, _gridSize)
        _destTexture = Wham.Texture.new(ctx, opts)
        _destTexture.clear(_gridSize, _gridSize)

        opts = Wham.TextureOptions.new(ctx, ctx.RGBA, ctx.REPEAT, ctx.LINEAR, ctx.UNSIGNED_BYTE)
        _tempOutputTexture = Wham.Texture.new(ctx, opts)
        _tempOutputTexture.clear(_gridSize, _gridSize)

        opts = Wham.TextureOptions.new(ctx, ctx.RGBA, ctx.REPEAT, ctx.NEAREST, ctx.UNSIGNED_BYTE)
        _seedInputTexture = Wham.Texture.new(ctx, opts)
        _seedInputTexture.clear(_gridSize, _gridSize)

        _framebuffer = Wham.Framebuffer.create(ctx)
    }

    # Public API
    ################################################################################

    def computeAndDraw(seedInputCanvas HTMLCanvasElement) {
        computeAndDraw(seedInputCanvas, Options.new)
    }

    def computeAndDraw(seedInputCanvas HTMLCanvasElement, options Options) {
        _setSeedsFromCanvas(seedInputCanvas, options.seedCanvasBackgroundColor)
        if options.maxRounds < 0 {
            _computeVoronoi(options)
        } else {
            _resetVoronoiSteps(options)
            for i in 0..options.maxRounds {
                _stepVoronoi
            }
        }

        switch options.output {
            case .VORONOI {
                _drawVoronoiDiagramToOutputCanvas
            }
            case .DISTANCE_FIELD {
                _drawDistanceFieldToOutputCanvas
            }
            case .DROP_SHADOW {
                if options.shadowSpread < 0 {
                    throw Error.new("If options.output is .SHADOW, you must set options.shadowSpread")
                }

                if options.shadowBlur < 0 {
                    throw Error.new("If options.output is .SHADOW, you must set options.shadowBlur")
                }

                _drawShadowToOutputCanvas(options.shadowSpread, options.shadowBlur)
            }
        }
    }

    # Private API
    ################################################################################

    def _setSeedsFromCanvas(inputCanvas HTMLCanvasElement) {
        _setSeedsFromCanvas(inputCanvas, Color.clear.toVec4)
    }

    def _setSeedsFromCanvas(inputCanvas HTMLCanvasElement, backgroundColor Float32Array) {
        _inputCanvas = inputCanvas
        _framebuffer.attach(_sourceTexture)
        _checkFramebufferCompletion

        # Create a texture for the canvas. Bind it to texture position 0.
        _seedInputTexture.set(inputCanvas)
        _seedInputTexture.bind(0)

        _wham.ctx.viewport(0, 0, _gridSize, _gridSize)
        _prepJumpFloodData.use
                          .attrib(GLSLX_NAME_QUAD, _quadBuffer, 2)
                          .uniform(GLSLX_NAME_I_SEED_INPUT_TEXTURE, 0)
                          .uniform(GLSLX_NAME_I_RESOLUTION, Float32Array.new([_gridSize, _gridSize]))
                          .uniform(GLSLX_NAME_I_BACKGROUND_COLOR, backgroundColor)
                          .draw(_wham.ctx.TRIANGLE_STRIP, 4)
    }

    def _drawVoronoiDiagramToOutputCanvas {
        # First draw _destTexture into _tempOutputTexture
        _framebuffer.attach(_tempOutputTexture)
        _checkFramebufferCompletion

        # Create a texture for the canvas. Bind it to texture position 0.
        _seedInputTexture.set(_inputCanvas)
        _seedInputTexture.bind(0)

        _destTexture.bind(1)

        _wham.ctx.viewport(0, 0, _gridSize, _gridSize)
        _drawVoronoi.use
                    .attrib(GLSLX_NAME_QUAD, _quadBuffer, 2)
                    .uniform(GLSLX_NAME_I_SEED_INPUT_TEXTURE, 0)
                    .uniform(GLSLX_NAME_I_INPUT_TEXTURE, 1)
                    .uniform(GLSLX_NAME_I_RESOLUTION, Float32Array.new([_gridSize, _gridSize]))
                    .draw(_wham.ctx.TRIANGLE_STRIP, 4)

        _drawTempTexture
    }

    def _drawDistanceFieldToOutputCanvas {
        # First draw _destTexture into _tempOutputTexture
        _framebuffer.attach(_tempOutputTexture)
        _checkFramebufferCompletion
        _destTexture.bind(0)
        _wham.ctx.viewport(0, 0, _gridSize, _gridSize)
        _drawDistanceField.use
                          .attrib(GLSLX_NAME_QUAD, _quadBuffer, 2)
                          .uniform(GLSLX_NAME_I_INPUT_TEXTURE, 0)
                          .uniform(GLSLX_NAME_I_RESOLUTION, Float32Array.new([_gridSize, _gridSize]))
                          .draw(_wham.ctx.TRIANGLE_STRIP, 4)

        _drawTempTexture
    }

    def _drawShadowToOutputCanvas(shadowSpread double, shadowBlur double) {
        # First draw _destTexture into _tempOutputTexture
        _framebuffer.attach(_tempOutputTexture)
        _checkFramebufferCompletion
        _destTexture.bind(0)
        _wham.ctx.viewport(0, 0, _gridSize, _gridSize)
        _drawDropShadow.use
                    .attrib(GLSLX_NAME_QUAD, _quadBuffer, 2)
                    .uniform(GLSLX_NAME_I_INPUT_TEXTURE, 0)
                    .uniform(GLSLX_NAME_I_RESOLUTION, Float32Array.new([_gridSize, _gridSize]))
                    .uniform(GLSLX_NAME_I_SHADOW_SPREAD, shadowSpread)
                    .uniform(GLSLX_NAME_I_SHADOW_BLUR, shadowBlur)
                    .uniform(GLSLX_NAME_I_SHADOW_COLOR, Float32Array.new([0.7, 0.7, 0.7, 1.0]))
                    .draw(_wham.ctx.TRIANGLE_STRIP, 4)
        _drawTempTexture
    }

    # We draw into _tempTexture at a higher resolution than we want on screen
    # and then scale down _tempTexture to antialias
    def _drawTempTexture {
        _wham.defaultFramebuffer.bind
        _checkFramebufferCompletion

        _tempOutputTexture.bind(0)
        _wham.ctx.viewport(0, 0, _outputCanvas.width, _outputCanvas.height)
        _renderTexture.use
                      .attrib(GLSLX_NAME_QUAD, _quadBuffer, 2)
                      .uniform(GLSLX_NAME_I_INPUT_TEXTURE, 0)
                      .uniform(GLSLX_NAME_I_RESOLUTION, Float32Array.new([_outputCanvas.width, _outputCanvas.height]))
                      .draw(_wham.ctx.TRIANGLE_STRIP, 4)
    }

    # Useful if you want to compute Voronoi in one step.
    def _computeVoronoi(options Options) {
        var stepSize int = _gridSize / 2
        while stepSize >= 1 {
            _runJumpFloodStep(stepSize, options)
            stepSize /= 2
        }
        _runJumpFloodStep(2, options)
        _runJumpFloodStep(1, options)
    }

    # Use resetVoronoiSteps and stepVoronoi to move foward
    # through iterations of the JFA algorithm. Useful, for
    # example, if you're showing an explanation of the
    # algorithm.
    def _resetVoronoiSteps(options Options) {
        var stepSize double = _gridSize / 2
        _simulationStepper = () => {
            if stepSize >= 1 {
                _runJumpFloodStep(stepSize as int, options)
                stepSize /= 2
            } else if stepSize < 1 {
                _runJumpFloodStep(2, options)
                _runJumpFloodStep(1, options)
            }
        }
    }

    def _stepVoronoi {
        _simulationStepper()
    }

    def _runJumpFloodStep(stepSize int, options Options) {
        # The current simulation state is always in _sourceTexture
        # and we draw onto _destTexture. So...
        #
        # 1. Bind the _destTexture onto the framebuffer so that
        #    we'll draw onto it.
        #
        # 2. Bind _sourceTexture texture to index 0. This is
        #    passed to the shader by setting the
        #    cellGridTexture uniform below.
        #
        _framebuffer.attach(_destTexture)
        _checkFramebufferCompletion

        _sourceTexture.bind(0)
        _wham.ctx.viewport(0, 0, _gridSize, _gridSize)
        _jumpFlood
            .use
            .attrib(GLSLX_NAME_QUAD, _quadBuffer, 2)
            .uniform(GLSLX_NAME_I_INPUT_TEXTURE, 0)
            .uniform(GLSLX_NAME_I_STEP_SIZE, stepSize)
            .uniform(GLSLX_NAME_I_RESOLUTION, Float32Array.new([_gridSize, _gridSize]))
            .uniform(GLSLX_NAME_I_USE_TORUS_DISTANCE_FOR_SEEDS, options.wrap ? 1 : 0)
            .draw(_wham.ctx.TRIANGLE_STRIP, 4)

        self._swapBuffers
    }

    def _swapBuffers {
        const tmp = _sourceTexture
        _sourceTexture = _destTexture
        _destTexture = tmp
    }

    def _checkFramebufferCompletion {
        if !RELEASE {
            const ctx = _wham.ctx
            var check = ctx.checkFramebufferStatus(ctx.FRAMEBUFFER)
            if check != ctx.FRAMEBUFFER_COMPLETE {
                throw Error.new("Framebuffer completion error")
            }
        }
    }
}