# Really small DOM that supports Skew XML syntax. Just playing around.

enum TraverseInstruction {
    CONTINUE
    STOP
}

def traverse(node XMLDomElement, callback fn(XMLDomElement)) {
    traverse(node, (descendent XMLDomElement) TraverseInstruction => {
        callback(descendent)
        return .CONTINUE
    })
}

def traverse(node XMLDomElement, callback fn(XMLDomElement) TraverseInstruction) {
    const queue = List<XMLDomElement>.new
    queue.append(node)

    while queue.count != 0 {
        const next = queue.takeFirst
        if callback(next) == .STOP {
            return
        }

        for child in next.children {
            queue.append(child)
        }
    }
}

class XMLDomElement {
    const _tag string = null
    const _children = List<XMLDomElement>.new
    const _element HTMLElement = null

    # Public HTMLElement attributes
    var style Style = Style.new
    var id string = null

    def new(tag string) {
        _element = document.createElement(tag)
    }

    def class=(value string) {
        _element.className = value
    }

    def class string {
        return _element.className
    }


    def children List<XMLDomElement> {
        return _children
    }

    def rawElement HTMLElement {
        _applyStyles
        return _element
    }

    def _applyStyles {
        style.applyToElement(_element)
        for child in _children {
            child._applyStyles
        }
    }

    def <>...</>(child string) {
        _element.textContent = child
    }

    def <>...</>(child XMLDomElement) {
        _children.append(child)
        _element.appendChild(child._element)
    }

    def getBoundingClientRect BoundingRect {
        return _element.getBoundingClientRect
    }

    def findDescendentById(id_ string) XMLDomElement {
        return _findDescendent((descendent XMLDomElement) bool => {
            return descendent.id == id_
        })
    }

    # TODO(ryan): This assumes that elements have at most one class. That's no good.
    def findDescendentByClassName(className_ string) XMLDomElement {
        return _findDescendent((descendent XMLDomElement) bool => {
            return descendent.class == className_
        })
    }

    def _findDescendent(check fn(XMLDomElement)bool) XMLDomElement {
        var result XMLDomElement = null

        traverse(self, (descendent XMLDomElement) TraverseInstruction => {
            if check(descendent) {
                result = descendent
                return .STOP
            }
            return .CONTINUE
        })

        return result
    }

    def addEventListener(type string, listener fn()) { HTML.on(_element, type, listener) }
    def addEventListener(type string, listener fn(HTMLEvent)) { HTML.on(_element, type, listener) }
    def addEventListener(type string, listener fn(HTMLKeyboardEvent)) { HTML.on(_element, type, listener) }
    def addEventListener(type string, listener fn(HTMLMouseEvent)) { HTML.on(_element, type, listener) }
    def addEventListener(type string, listener fn(HTMLTouchEvent)) { HTML.on(_element, type, listener) }
    def addEventListener(type string, listener fn(HTMLWheelEvent)) { HTML.on(_element, type, listener) }

    def removeEventListener(type string, listener fn()) { HTML.off(_element, type, listener) }
    def removeEventListener(type string, listener fn(HTMLEvent)) { HTML.off(_element, type, listener) }
    def removeEventListener(type string, listener fn(HTMLKeyboardEvent)) { HTML.off(_element, type, listener) }
    def removeEventListener(type string, listener fn(HTMLMouseEvent)) { HTML.off(_element, type, listener) }
    def removeEventListener(type string, listener fn(HTMLTouchEvent)) { HTML.off(_element, type, listener) }
    def removeEventListener(type string, listener fn(HTMLWheelEvent)) { HTML.off(_element, type, listener) }
}

class div : XMLDomElement {
    def new { super("div") }
}

class span : XMLDomElement {
    def new { super("span") }
}

class canvas : XMLDomElement {
    def new { super("canvas") }

    def element HTMLCanvasElement {
        return _element as HTMLCanvasElement
    }

    def width dynamic { return element.width }
    def width=(value dynamic) { element.width = value }
    def height dynamic { return element.height }
    def height=(value dynamic) { element.height = value }
}

class img : XMLDomElement {
    def new { super("img") }

    def element HTMLImageElement {
        return _element as HTMLImageElement
    }

    def src string { return element.src }
    def src=(value string) { element.src = value }
    def onload fn() { return element.onload }
    def onload=(value fn()) { element.onload = value }
}
